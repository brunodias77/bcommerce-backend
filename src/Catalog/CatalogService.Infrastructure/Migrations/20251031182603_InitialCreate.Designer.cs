// <auto-generated />
using System;
using CatalogService.Infrastructure.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CatalogService.Infrastructure.Migrations
{
    [DbContext(typeof(CatalogDbContext))]
    [Migration("20251031182603_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "pg_trgm");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CatalogService.Domain.Aggregates.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<int>("DisplayOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("display_order");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("JSONB")
                        .HasDefaultValue("{}")
                        .HasColumnName("metadata");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("slug");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("idx_categories_active");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("idx_categories_parent_id");

                    b.HasIndex("Slug")
                        .IsUnique()
                        .HasDatabaseName("idx_categories_slug");

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("CatalogService.Domain.Aggregates.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Barcode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("barcode");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<decimal?>("CompareAtPrice")
                        .HasColumnType("DECIMAL(10,2)")
                        .HasColumnName("compare_at_price");

                    b.Property<decimal?>("CostPrice")
                        .HasColumnType("DECIMAL(10,2)")
                        .HasColumnName("cost_price");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("DimensionsCm")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("dimensions_cm");

                    b.Property<int>("FavoriteCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("favorite_count");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool>("IsFeatured")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_featured");

                    b.Property<int>("LowStockThreshold")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(10)
                        .HasColumnName("low_stock_threshold");

                    b.Property<string>("MetaDescription")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("meta_description");

                    b.Property<string>("MetaTitle")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("meta_title");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("DECIMAL(10,2)")
                        .HasColumnName("price");

                    b.Property<decimal>("ReviewAvgRating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DECIMAL(3,2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("review_avg_rating");

                    b.Property<int>("ReviewCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("review_count");

                    b.Property<string>("ShortDescription")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("short_description");

                    b.Property<string>("Sku")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("sku");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(180)
                        .HasColumnType("character varying(180)")
                        .HasColumnName("slug");

                    b.Property<int>("Stock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("stock");

                    b.Property<int>("StockReserved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("stock_reserved");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("version");

                    b.Property<int>("ViewCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("view_count");

                    b.Property<decimal?>("WeightKg")
                        .HasColumnType("DECIMAL(10,3)")
                        .HasColumnName("weight_kg");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("idx_products_category_id")
                        .HasFilter("deleted_at IS NULL");

                    b.HasIndex("Description")
                        .HasDatabaseName("idx_products_description_trgm");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Description"), "gin");
                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex("Description"), new[] { "gin_trgm_ops" });

                    b.HasIndex("IsActive")
                        .HasDatabaseName("idx_products_active")
                        .HasFilter("deleted_at IS NULL");

                    b.HasIndex("IsFeatured")
                        .HasDatabaseName("idx_products_featured")
                        .HasFilter("is_featured = TRUE AND deleted_at IS NULL");

                    b.HasIndex("Name")
                        .HasDatabaseName("idx_products_name_trgm");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Name"), "gin");
                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex("Name"), new[] { "gin_trgm_ops" });

                    b.HasIndex("Price")
                        .HasDatabaseName("idx_products_price")
                        .HasFilter("deleted_at IS NULL");

                    b.HasIndex("Sku")
                        .IsUnique()
                        .HasDatabaseName("idx_products_sku")
                        .HasFilter("deleted_at IS NULL");

                    b.HasIndex("Slug")
                        .IsUnique()
                        .HasDatabaseName("idx_products_slug")
                        .HasFilter("deleted_at IS NULL");

                    b.HasIndex("Stock")
                        .HasDatabaseName("idx_products_stock")
                        .HasFilter("deleted_at IS NULL");

                    b.ToTable("products", (string)null);
                });

            modelBuilder.Entity("CatalogService.Domain.Aggregates.ProductReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT")
                        .HasColumnName("comment");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int>("HelpfulCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("helpful_count");

                    b.Property<bool>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_approved");

                    b.Property<bool>("IsFeatured")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_featured");

                    b.Property<bool>("IsVerifiedPurchase")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_verified_purchase");

                    b.Property<DateTime?>("ModeratedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("moderated_at");

                    b.Property<Guid?>("ModeratedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("moderated_by");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<int>("Rating")
                        .HasColumnType("integer")
                        .HasColumnName("rating");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("title");

                    b.Property<int>("UnhelpfulCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("unhelpful_count");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("IsApproved")
                        .HasDatabaseName("idx_product_reviews_approved")
                        .HasFilter("is_approved = TRUE AND deleted_at IS NULL");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("idx_product_reviews_product_id")
                        .HasFilter("deleted_at IS NULL");

                    b.HasIndex("Rating")
                        .HasDatabaseName("idx_product_reviews_rating");

                    b.HasIndex("UserId")
                        .HasDatabaseName("idx_product_reviews_user_id")
                        .HasFilter("deleted_at IS NULL");

                    b.ToTable("product_reviews", (string)null);
                });

            modelBuilder.Entity("CatalogService.Domain.Entities.FavoriteProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("idx_favorite_products_product_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("idx_favorite_products_user_id");

                    b.HasIndex("UserId", "ProductId")
                        .IsUnique();

                    b.ToTable("favorite_products", (string)null);
                });

            modelBuilder.Entity("CatalogService.Domain.Entities.InboxEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("AggregateId")
                        .HasColumnType("uuid")
                        .HasColumnName("aggregate_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("event_type");

                    b.Property<DateTime>("ProcessedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_at");

                    b.HasKey("Id");

                    b.HasIndex("AggregateId")
                        .HasDatabaseName("idx_inbox_events_aggregate_id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("idx_inbox_events_created_at");

                    b.HasIndex("EventType")
                        .HasDatabaseName("idx_inbox_events_event_type");

                    b.ToTable("inbox_events", (string)null);
                });

            modelBuilder.Entity("CatalogService.Domain.Entities.OutboxEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("AggregateId")
                        .HasColumnType("uuid")
                        .HasColumnName("aggregate_id");

                    b.Property<string>("AggregateType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("aggregate_type");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("TEXT")
                        .HasColumnName("error_message");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("event_type");

                    b.Property<int>("EventVersion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("event_version");

                    b.Property<int>("MaxRetries")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(3)
                        .HasColumnName("max_retries");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("JSONB")
                        .HasDefaultValue("{}")
                        .HasColumnName("metadata");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("JSONB")
                        .HasColumnName("payload");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("published_at");

                    b.Property<int>("RetryCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("retry_count");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("PENDING")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("idx_outbox_events_created_at");

                    b.HasIndex("Status")
                        .HasDatabaseName("idx_outbox_events_status")
                        .HasFilter("status IN ('PENDING', 'FAILED')");

                    b.ToTable("outbox_events", (string)null);
                });

            modelBuilder.Entity("CatalogService.Domain.Entities.ProductImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("AltText")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("alt_text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("DisplayOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("display_order");

                    b.Property<bool>("IsPrimary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_primary");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<string>("ThumbnailUrl")
                        .HasColumnType("TEXT")
                        .HasColumnName("thumbnail_url");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("idx_product_images_product_id");

                    b.HasIndex("ProductId", "IsPrimary")
                        .HasDatabaseName("idx_product_images_primary")
                        .HasFilter("is_primary = TRUE");

                    b.ToTable("product_images", (string)null);
                });

            modelBuilder.Entity("CatalogService.Domain.Entities.ReceivedEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("event_type");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("JSONB")
                        .HasColumnName("payload");

                    b.Property<bool>("Processed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("processed");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_at");

                    b.Property<string>("SourceService")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("source_service");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("idx_received_events_created_at");

                    b.HasIndex("EventType")
                        .HasDatabaseName("idx_received_events_event_type");

                    b.HasIndex("Processed")
                        .HasDatabaseName("idx_received_events_processed")
                        .HasFilter("processed = false");

                    b.HasIndex("SourceService")
                        .HasDatabaseName("idx_received_events_source_service");

                    b.ToTable("received_events", (string)null);
                });

            modelBuilder.Entity("CatalogService.Domain.Entities.ReviewVote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<bool>("IsHelpful")
                        .HasColumnType("boolean")
                        .HasColumnName("is_helpful");

                    b.Property<Guid>("ReviewId")
                        .HasColumnType("uuid")
                        .HasColumnName("review_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("ReviewId")
                        .HasDatabaseName("idx_review_votes_review_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("idx_review_votes_user_id");

                    b.HasIndex("ReviewId", "UserId")
                        .IsUnique();

                    b.ToTable("review_votes", (string)null);
                });

            modelBuilder.Entity("CatalogService.Domain.Aggregates.Category", b =>
                {
                    b.HasOne("CatalogService.Domain.Aggregates.Category", null)
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("CatalogService.Domain.Aggregates.Product", b =>
                {
                    b.HasOne("CatalogService.Domain.Aggregates.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("CatalogService.Domain.Aggregates.ProductReview", b =>
                {
                    b.HasOne("CatalogService.Domain.Aggregates.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CatalogService.Domain.Entities.FavoriteProduct", b =>
                {
                    b.HasOne("CatalogService.Domain.Aggregates.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CatalogService.Domain.Entities.ProductImage", b =>
                {
                    b.HasOne("CatalogService.Domain.Aggregates.Product", null)
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CatalogService.Domain.Entities.ReviewVote", b =>
                {
                    b.HasOne("CatalogService.Domain.Aggregates.ProductReview", null)
                        .WithMany()
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CatalogService.Domain.Aggregates.Product", b =>
                {
                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
