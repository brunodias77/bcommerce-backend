using BuildingBlocks.Core.Data;
using CatalogService.Infrastructure.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.Extensions.Logging;

namespace CatalogService.Infrastructure.Data.UnitOfWork;

/// <summary>
/// Implementa√ß√£o do padr√£o Unit of Work para o CatalogService.
/// Gerencia transa√ß√µes e opera√ß√µes de persist√™ncia de dados usando Entity Framework Core.
/// </summary>
public class UnitOfWork : IUnitOfWork
{
    private readonly CatalogDbContext _context;
    private readonly ILogger<UnitOfWork> _logger;
    private IDbContextTransaction? _currentTransaction;
    private bool _disposed = false;

    public UnitOfWork(CatalogDbContext context, ILogger<UnitOfWork> logger)
    {
        _context = context ?? throw new ArgumentNullException(nameof(context));
        _logger = logger ?? throw new ArgumentNullException(nameof(logger));
    }

    /// <summary>
    /// Indica se existe uma transa√ß√£o ativa no momento
    /// </summary>
    public bool HasActiveTransaction => _currentTransaction != null;

    /// <summary>
    /// Retorna o ID da transa√ß√£o atual (se houver)
    /// </summary>
    public Guid? CurrentTransactionId => _currentTransaction?.TransactionId;

    /// <summary>
    /// Salva todas as mudan√ßas pendentes no contexto.
    /// 
    /// IMPORTANTE: Este m√©todo N√ÉO faz commit da transa√ß√£o automaticamente.
    /// O commit deve ser feito explicitamente via CommitTransactionAsync.
    /// </summary>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <returns>N√∫mero de entidades afetadas</returns>
    public async Task<int> SaveChangesAsync(CancellationToken cancellationToken = default)
    {
        try
        {
            _logger.LogDebug(
                "[UnitOfWork] Iniciando SaveChangesAsync. Transa√ß√£o ativa: {HasTransaction}",
                HasActiveTransaction
            );
            
            var result = await _context.SaveChangesAsync(cancellationToken);
            
            _logger.LogInformation(
                "‚úÖ [UnitOfWork] SaveChangesAsync conclu√≠do com sucesso. " +
                "{EntitiesAffected} entidade(s) afetada(s). Transa√ß√£o ativa: {HasTransaction}",
                result,
                HasActiveTransaction
            );
            
            return result;
        }
        catch (DbUpdateConcurrencyException ex)
        {
            _logger.LogError(
                ex,
                "‚ùå [UnitOfWork] Erro de concorr√™ncia detectado durante SaveChangesAsync. " +
                "Entidade: {EntityName}",
                ex.Entries.FirstOrDefault()?.Entity.GetType().Name ?? "Desconhecida"
            );
            throw;
        }
        catch (DbUpdateException ex)
        {
            _logger.LogError(
                ex,
                "‚ùå [UnitOfWork] Erro de atualiza√ß√£o do banco de dados durante SaveChangesAsync. " +
                "Inner Exception: {InnerException}",
                ex.InnerException?.Message ?? "Nenhuma"
            );
            throw;
        }
        catch (Exception ex)
        {
            _logger.LogError(
                ex,
                "‚ùå [UnitOfWork] Erro inesperado durante SaveChangesAsync. " +
                "Tipo: {ExceptionType}",
                ex.GetType().Name
            );
            throw;
        }
    }

    /// <summary>
    /// Inicia uma nova transa√ß√£o de banco de dados.
    /// 
    /// IMPORTANTE: Apenas uma transa√ß√£o pode estar ativa por vez.
    /// Se j√° existe uma transa√ß√£o ativa, lan√ßa InvalidOperationException.
    /// </summary>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <exception cref="InvalidOperationException">Se j√° existe uma transa√ß√£o ativa</exception>
    public async Task BeginTransactionAsync(CancellationToken cancellationToken = default)
    {
        if (_currentTransaction != null)
        {
            var errorMessage = $"Tentativa de iniciar nova transa√ß√£o quando j√° existe uma ativa. " +
                              $"TransactionId atual: {_currentTransaction.TransactionId}";
            
            _logger.LogError("[UnitOfWork] {ErrorMessage}", errorMessage);
            throw new InvalidOperationException(errorMessage);
        }

        try
        {
            _logger.LogDebug("[UnitOfWork] Iniciando nova transa√ß√£o...");
            
            _currentTransaction = await _context.Database.BeginTransactionAsync(cancellationToken);
            
            _logger.LogInformation(
                "‚úÖ [UnitOfWork] Transa√ß√£o iniciada com sucesso. TransactionId: {TransactionId}",
                _currentTransaction.TransactionId
            );
        }
        catch (Exception ex)
        {
            _logger.LogError(
                ex,
                "‚ùå [UnitOfWork] Erro ao iniciar transa√ß√£o. Tipo: {ExceptionType}, " +
                "Mensagem: {ExceptionMessage}",
                ex.GetType().Name,
                ex.Message
            );
            throw;
        }
    }

    /// <summary>
    /// Confirma a transa√ß√£o atual, persistindo todas as mudan√ßas no banco de dados.
    /// 
    /// Este m√©todo:
    /// 1. Valida se existe uma transa√ß√£o ativa
    /// 2. Faz commit da transa√ß√£o
    /// 3. Libera os recursos da transa√ß√£o
    /// </summary>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <exception cref="InvalidOperationException">Se n√£o existe transa√ß√£o ativa</exception>
    public async Task CommitTransactionAsync(CancellationToken cancellationToken = default)
    {
        if (_currentTransaction == null)
        {
            var errorMessage = "Tentativa de commit sem transa√ß√£o ativa";
            _logger.LogError("[UnitOfWork] {ErrorMessage}", errorMessage);
            throw new InvalidOperationException(errorMessage);
        }

        var transactionId = _currentTransaction.TransactionId;

        try
        {
            _logger.LogDebug(
                "[UnitOfWork] Iniciando commit da transa√ß√£o. TransactionId: {TransactionId}",
                transactionId
            );
            
            // Commit da transa√ß√£o
            await _currentTransaction.CommitAsync(cancellationToken);
            
            _logger.LogInformation(
                "‚úÖ [UnitOfWork] Transa√ß√£o confirmada com sucesso. TransactionId: {TransactionId}",
                transactionId
            );
        }
        catch (Exception ex)
        {
            _logger.LogError(
                ex,
                "‚ùå [UnitOfWork] Erro ao confirmar transa√ß√£o. TransactionId: {TransactionId}, " +
                "Tipo: {ExceptionType}, Mensagem: {ExceptionMessage}",
                transactionId,
                ex.GetType().Name,
                ex.Message
            );
            
            // Tenta fazer rollback em caso de erro no commit
            try
            {
                await RollbackTransactionAsync(cancellationToken);
            }
            catch (Exception rollbackEx)
            {
                _logger.LogCritical(
                    rollbackEx,
                    "üí• [UnitOfWork] ERRO CR√çTICO: Falha no rollback ap√≥s erro no commit. " +
                    "TransactionId: {TransactionId}",
                    transactionId
                );
            }
            
            throw;
        }
        finally
        {
            await DisposeTransactionAsync();
        }
    }

    /// <summary>
    /// Desfaz a transa√ß√£o atual, revertendo todas as mudan√ßas.
    /// 
    /// Este m√©todo:
    /// 1. Valida se existe uma transa√ß√£o ativa
    /// 2. Faz rollback da transa√ß√£o
    /// 3. Libera os recursos da transa√ß√£o
    /// </summary>
    /// <param name="cancellationToken">Token de cancelamento</param>
    /// <exception cref="InvalidOperationException">Se n√£o existe transa√ß√£o ativa</exception>
    public async Task RollbackTransactionAsync(CancellationToken cancellationToken = default)
    {
        if (_currentTransaction == null)
        {
            var errorMessage = "Tentativa de rollback sem transa√ß√£o ativa";
            _logger.LogWarning("[UnitOfWork] {ErrorMessage}", errorMessage);
            throw new InvalidOperationException(errorMessage);
        }

        var transactionId = _currentTransaction.TransactionId;

        try
        {
            _logger.LogDebug(
                "[UnitOfWork] Iniciando rollback da transa√ß√£o. TransactionId: {TransactionId}",
                transactionId
            );
            
            await _currentTransaction.RollbackAsync(cancellationToken);
            
            _logger.LogInformation(
                "üîÑ [UnitOfWork] Transa√ß√£o desfeita com sucesso. TransactionId: {TransactionId}",
                transactionId
            );
        }
        catch (Exception ex)
        {
            _logger.LogError(
                ex,
                "‚ùå [UnitOfWork] Erro ao desfazer transa√ß√£o. TransactionId: {TransactionId}, " +
                "Tipo: {ExceptionType}, Mensagem: {ExceptionMessage}",
                transactionId,
                ex.GetType().Name,
                ex.Message
            );
            throw;
        }
        finally
        {
            await DisposeTransactionAsync();
        }
    }

    /// <summary>
    /// Libera os recursos utilizados pelo UnitOfWork
    /// </summary>
    public void Dispose()
    {
        Dispose(true);
        GC.SuppressFinalize(this);
    }

    /// <summary>
    /// Implementa√ß√£o do padr√£o Dispose
    /// </summary>
    /// <param name="disposing">Indica se est√° sendo chamado pelo Dispose ou pelo finalizer</param>
    protected virtual void Dispose(bool disposing)
    {
        if (!_disposed && disposing)
        {
            try
            {
                if (_currentTransaction != null)
                {
                    _logger.LogWarning(
                        "‚ö†Ô∏è [UnitOfWork] Descartando UnitOfWork com transa√ß√£o ativa. " +
                        "TransactionId: {TransactionId}. Fazendo rollback autom√°tico...",
                        _currentTransaction.TransactionId
                    );
                    
                    _currentTransaction.Rollback();
                    _currentTransaction.Dispose();
                    _currentTransaction = null;
                }

                _logger.LogDebug("[UnitOfWork] UnitOfWork descartado com sucesso");
            }
            catch (Exception ex)
            {
                _logger.LogError(
                    ex,
                    "‚ùå [UnitOfWork] Erro ao descartar UnitOfWork. Tipo: {ExceptionType}",
                    ex.GetType().Name
                );
            }
            finally
            {
                _disposed = true;
            }
        }
    }

    /// <summary>
    /// Descarta a transa√ß√£o atual de forma ass√≠ncrona
    /// </summary>
    private async Task DisposeTransactionAsync()
    {
        if (_currentTransaction != null)
        {
            _logger.LogDebug(
                "[UnitOfWork] Liberando recursos da transa√ß√£o. TransactionId: {TransactionId}",
                _currentTransaction.TransactionId
            );
            
            await _currentTransaction.DisposeAsync();
            _currentTransaction = null;
            
            _logger.LogDebug("[UnitOfWork] Recursos da transa√ß√£o liberados");
        }
    }
}