

using CatalogService.Api.Configurations;
using Microsoft.AspNetCore.Hosting.Server;
using Microsoft.AspNetCore.Hosting.Server.Features;
using Serilog;

var builder = WebApplication.CreateBuilder(args);

// Configurar Serilog
builder.Host.UseSerilog((context, configuration) =>
    configuration.ReadFrom.Configuration(context.Configuration));



builder.Services.AddControllers();
// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();


// Configura√ß√£o de CORS para aplica√ß√µes frontend
builder.Services.AddCors(options =>
{
    options.AddPolicy("AllowFrontendApps", policy =>
    {
        policy.WithOrigins("http://localhost:4200", "http://localhost:3000") // Angular e React
            .AllowAnyHeader()
            .AllowAnyMethod()
            .AllowCredentials();
    });
});



// Configura√ß√£o da camada de infraestrutura
builder.Services.AddInfrastructure(builder.Configuration);

// Configura√ß√£o da camada de aplica√ß√£o
builder.Services.AddApplication(builder.Configuration);

var app = builder.Build();


// Log de inicializa√ß√£o
var logger = app.Services.GetRequiredService<ILogger<Program>>();
logger.LogInformation("üöÄ Catalog Service iniciado com sucesso!");
logger.LogInformation("üåç Ambiente: {Environment}", app.Environment.EnvironmentName);
logger.LogInformation("üìç Diret√≥rio de trabalho: {WorkingDirectory}", Directory.GetCurrentDirectory());



// Configure the HTTP request pipeline.
// 1. Serilog Request Logging - DEVE VIR PRIMEIRO para capturar todos os requests
app.UseSerilogRequestLogging(options =>
{
    options.MessageTemplate = "üì• HTTP {RequestMethod} {RequestPath} respondeu {StatusCode} em {Elapsed:0.0000} ms";
    options.GetLevel = (httpContext, elapsed, ex) => ex != null
        ? Serilog.Events.LogEventLevel.Error
        : httpContext.Response.StatusCode > 499
            ? Serilog.Events.LogEventLevel.Error
            : Serilog.Events.LogEventLevel.Information;
    options.EnrichDiagnosticContext = (diagnosticContext, httpContext) =>
    {
        diagnosticContext.Set("RequestHost", httpContext.Request.Host.Value);
        diagnosticContext.Set("RequestScheme", httpContext.Request.Scheme);
        diagnosticContext.Set("UserAgent", httpContext.Request.Headers["User-Agent"].FirstOrDefault() ?? "Unknown");
        diagnosticContext.Set("ServiceName", "Catalog.Api");
    };
});


// 2. CORS - DEVE VIR ANTES de outros middlewares
app.UseCors("AllowFrontendApps");

// 3. HTTPS Redirection - SEMPRE PRIMEIRO para for√ßar HTTPS
app.UseHttpsRedirection();

// 4. Swagger - Documenta√ß√£o da API
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

// 5. BuildingBlocks Middlewares - seguran√ßa, valida√ß√£o, monitoramento
//app.UseBuildingBlocksMiddleware(app.Environment.IsDevelopment());

// 6. Middleware de autentica√ß√£o e autoriza√ß√£o - AP√ìS os middlewares de seguran√ßa
app.UseAuthentication();
app.UseAuthorization();

app.MapControllers();


logger.LogInformation("üéØ Catalog Service configurado e pronto para receber requisi√ß√µes!");

// Configurar evento para logar as URLs reais ap√≥s a aplica√ß√£o iniciar
var lifetime = app.Services.GetRequiredService<IHostApplicationLifetime>();
lifetime.ApplicationStarted.Register(() =>
{
    var server = app.Services.GetRequiredService<IServer>();
    var addressFeature = server.Features.Get<IServerAddressesFeature>();
    
    if (addressFeature?.Addresses?.Any() == true)
    {
        foreach (var address in addressFeature.Addresses)
        {
            logger.LogInformation("üåê Catalog API rodando em: {Url}", address);
        }
    }
    else
    {
        logger.LogInformation("üåê Catalog API iniciada (endere√ßos n√£o dispon√≠veis)");
    }
});

try
{
    app.Run();
}
catch (Exception ex)
{
    logger.LogCritical(ex, "üí• Erro cr√≠tico durante a execu√ß√£o do Catalog Service");
    throw;
}
finally
{
    Log.CloseAndFlush();
}